!function(e){var t={};function i(l){if(t[l])return t[l].exports;var n=t[l]={i:l,l:!1,exports:{}};return e[l].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,l){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:l})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(i.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(l,n,function(t){return e[t]}.bind(null,n));return l},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/",i(i.s=0)}({0:function(e,t,i){i("WfG0"),e.exports=i("zcrr")},WfG0:function(e,t,i){"use strict";i.r(t);var l=biigle.$require("core.mixins.editor"),n=biigle.$require("events"),a=biigle.$require("messages").handleErrorResponse,s=biigle.$require("keyboard"),r=biigle.$require("api.labels"),o=biigle.$require("api.labelSource"),c=biigle.$require("api.labelTree"),d=biigle.$require("api.labelTreeVersion"),h=biigle.$require("core.mixins.loader"),u=biigle.$require("core.components.membersPanel"),f=biigle.$require("messages"),b=biigle.$require("api.projects"),p=biigle.$require("core.components.typeahead"),m={mixins:[p],props:{template:{default:'<span class="label-typeahead-item"><span v-if="item.color" :style="{\'background-color\': \'#\' + item.color}" class="label-color"></span><span v-text="item.name"></span></span>'}}},v={template:'<div class="label-tree">\n        <h4 class="label-tree__title" v-if="showTitle">\n            <button v-if="collapsible" @click.stop="collapse" class="btn btn-default btn-xs pull-right" :title="collapseTitle" type="button">\n                <span v-if="collapsed" class="fa fa-chevron-down" aria-hidden="true"></span>\n                <span v-else class="fa fa-chevron-up" aria-hidden="true"></span>\n            </button>\n            {{name}}\n        </h4>\n        <ul v-if="!collapsed" class="label-tree__list">\n            <label-tree-label :key="label.id" :label="label" :editable="editable" :show-favourites="showFavourites" :flat="flat" v-for="label in rootLabels" @select="emitSelect" @deselect="emitDeselect" @save="emitSave" @delete="emitDelete" @add-favourite="emitAddFavourite" @remove-favourite="emitRemoveFavourite"></label-tree-label>\n            <li v-if="hasNoLabels" class="text-muted">No labels</li>\n        </ul>\n    </div>',data:function(){return{collapsed:!1}},components:{labelTreeLabel:{name:"label-tree-label",template:'<li class="label-tree-label" :class="classObject">\n        <div class="label-tree-label__name" @click="toggleOpen" @mouseover="doHover" @mouseleave="dontHover">\n            <span v-if="editing">\n                <input type="color" class="form-control input-sm label-tree-color-input" v-model="newColor" />\n                <input type="text" v-model="newName" v-on:keydown.enter="saveThis" class="form-control input-sm label-tree-label__name-input">\n            </span>\n            <span v-else>\n                <span v-show="showColor" class="label-tree-label__color" :style="colorStyle"></span>\n                <span v-show="showChevronDown" class="label-tree-label__chevron label-tree-label__chevron--down" :style="chevronStyle"></span>\n                <span v-show="showChevronUp" class="label-tree-label__chevron label-tree-label__chevron--up" :style="chevronStyle"></span>\n                <span v-text="label.name" @click.stop="toggleSelect" @mouseenter="dontHover"></span>\n            </span>\n            <span class="label-tree-label__buttons">\n                <button v-if="showFavourites" type="button" class="label-tree-label__favourite" :class="favouriteClass" @click.stop="toggleFavourite" :title="favouriteTitle">\n                    <span class="fa fa-star" aria-hidden="true" title=""></span>\n                </button>\n                <button v-if="editable && !editing" :title="editTitle" @click.stop="editThis"><span aria-hidden="true" class="fa fa-pencil-alt"></span></button>\n                <button v-if="editing" class="text-danger" :title="deleteTitle" @click.stop="deleteThis"><span aria-hidden="true" class="fa fa-trash"></span></button>\n                <button v-if="editing" title="Revert changes" @click.stop="revertThis"><span aria-hidden="true" class="fa fa-times"></span></button>\n                <button v-if="editing" class="text-success" title="Save changes" @click.stop="saveThis"><span aria-hidden="true" class="fa fa-check"></span></button>\n            </span>\n        </div>\n        <ul v-if="expandable && label.open" class="label-tree__list">\n            <label-tree-label :key="child.id" :label="child" :editable="editable" :show-favourites="showFavourites" v-for="child in label.children" @select="emitSelect" @deselect="emitDeselect" @save="emitSave" @delete="emitDelete" @add-favourite="emitAddFavourite" @remove-favourite="emitRemoveFavourite"></label-tree-label>\n        </ul>\n    </li>',data:function(){return{hover:!1,editing:!1,oldName:"",oldColor:"",newName:"",newColor:""}},props:{label:{type:Object,required:!0},showFavourites:{type:Boolean,required:!1},editable:{type:Boolean,default:!1},flat:{type:Boolean,default:!1}},computed:{showColor:function(){return!this.expandable||!this.hover},showChevronUp:function(){return!this.showColor&&this.label.open},showChevronDown:function(){return!this.showColor&&!this.label.open},classObject:function(){return{"label-tree-label--selected":this.label.selected,"label-tree-label--expandable":this.expandable,"label-tree-label--editing":this.editing}},colorStyle:function(){return{"background-color":"#"+this.label.color}},chevronStyle:function(){return{color:"#"+this.label.color}},favouriteClass:function(){return{selected:this.label.favourite}},favouriteTitle:function(){return(this.label.favourite?"Remove":"Add")+" as favourite"},editTitle:function(){return"Edit label "+this.label.name},deleteTitle:function(){return"Remove label "+this.label.name},expandable:function(){return!this.flat&&!!this.label.children}},methods:{toggleSelect:function(e){this.editing||(e.preventDefault(),this.label.selected?this.$emit("deselect",this.label,e):this.$emit("select",this.label,e))},editThis:function(){this.editing=!0,this.oldName=this.label.name,this.oldColor=this.label.color,this.newName=this.label.name,this.newColor="#"+this.label.color},saveThis:function(){var e=this;this.label.name=this.newName,this.label.color=this.newColor.substr(1),this.editing=!1,this.oldName===this.label.name&&this.oldColor===this.label.color||this.emitSave(this.label,(function(){return e.editing=!0}))},revertThis:function(){this.editing=!1,this.label.name=this.oldName,this.label.color=this.oldColor},deleteThis:function(){this.emitDelete(this.label)},toggleOpen:function(e){this.editing||(this.expandable?this.label.open=!this.label.open:this.toggleSelect(e))},toggleFavourite:function(){this.label.favourite?this.emitRemoveFavourite(this.label):this.emitAddFavourite(this.label)},emitSelect:function(e,t){this.$emit("select",e,t)},emitDeselect:function(e,t){this.$emit("deselect",e,t)},emitDelete:function(e){this.$emit("delete",e)},emitSave:function(e,t){this.$emit("save",e,t)},emitAddFavourite:function(e){this.$emit("add-favourite",e)},emitRemoveFavourite:function(e){this.$emit("remove-favourite",e)},doHover:function(){this.hover=!0},dontHover:function(){this.hover=!1}}}},props:{name:{type:String,required:!0},labels:{type:Array,required:!0},showTitle:{type:Boolean,default:!0},standalone:{type:Boolean,default:!1},collapsible:{type:Boolean,default:!0},multiselect:{type:Boolean,default:!1},allowSelectSiblings:{type:Boolean,default:!1},allowSelectChildren:{type:Boolean,default:!1},editable:{type:Boolean,default:!1},showFavourites:{type:Boolean,default:!1},flat:{type:Boolean,default:!1}},computed:{labelMap:function(){for(var e={},t=this.labels.length-1;t>=0;t--)e[this.labels[t].id]=this.labels[t];return e},compiledLabels:function(){var e={null:[]};return this.flat?this.labels.forEach((function(t){e.null.push(t)})):(this.labels.forEach((function(t){e.hasOwnProperty(t.parent_id)?e[t.parent_id].push(t):e[t.parent_id]=[t]})),this.labels.forEach((function(t){e.hasOwnProperty(t.id)?Vue.set(t,"children",e[t.id]):(Vue.set(t,"children",void 0),t.open=!1)}))),e},rootLabels:function(){return this.compiledLabels.null},collapseTitle:function(){return this.collapsed?"Expand":"Collapse"},hasNoLabels:function(){return 0===this.rootLabels.length}},methods:{hasLabel:function(e){return this.labelMap.hasOwnProperty(e)},getLabel:function(e){return this.labelMap[e]},getParents:function(e){for(var t=[];null!==e.parent_id;)e=this.getLabel(e.parent_id),t.unshift(e.id);return t},getSiblings:function(e){return null===e.parent_id?this.rootLabels:this.getLabel(e.parent_id).children},selectSiblings:function(e){this.getSiblings(e).forEach((function(e){e.selected=!0}))},deselectSiblings:function(e){this.getSiblings(e).forEach((function(e){e.selected=!1}))},selectChildren:function(e){var t=this;e.children&&e.children.forEach((function(e){e.selected=!0,t.selectChildren(e)}))},deselectChildren:function(e){var t=this;e.children&&e.children.forEach((function(e){e.selected=!1,t.deselectChildren(e)}))},emitSelect:function(e,t){this.$emit("select",e,t)},emitDeselect:function(e,t){this.$emit("deselect",e,t)},emitSave:function(e,t){this.$emit("save",e,t)},emitDelete:function(e){this.$emit("delete",e)},conditionSelectSiblings:function(e){return this.allowSelectSiblings&&e.altKey},conditionSelectChildren:function(e){return this.allowSelectChildren&&e.ctrlKey},selectLabel:function(e,t){var i=this;this.multiselect||this.clearSelectedLabels(),e&&this.hasLabel(e.id)&&(e.selected=!0,this.collapsed=!1,this.flat||(this.getParents(e).forEach((function(e){i.getLabel(e).open=!0})),this.multiselect&&(this.conditionSelectSiblings(t)&&this.selectSiblings(e),this.conditionSelectChildren(t)&&(this.selectChildren(e),this.conditionSelectSiblings(t)&&this.getSiblings(e).forEach(this.selectChildren)))))},deselectLabel:function(e,t){this.hasLabel(e.id)&&(e.selected=!1,this.conditionSelectSiblings(t)&&this.deselectSiblings(e),this.conditionSelectChildren(t)&&(this.deselectChildren(e),this.conditionSelectSiblings(t)&&this.getSiblings(e).forEach(this.deselectChildren)))},clearSelectedLabels:function(){this.labels.forEach((function(e){e.selected=!1}))},collapse:function(){if(this.collapsed)this.collapsed=!1;else{var e=!1;this.labels.forEach((function(t){e|=t.open,t.open=!1})),this.collapsed=!e}},emitAddFavourite:function(e){this.$emit("add-favourite",e)},emitRemoveFavourite:function(e){this.$emit("remove-favourite",e)},addFavouriteLabel:function(e){this.hasLabel(e.id)&&(e.favourite=!0)},removeFavouriteLabel:function(e){this.hasLabel(e.id)&&(e.favourite=!1)}},created:function(){this.labels.forEach((function(e){e.hasOwnProperty("open")||Vue.set(e,"open",!1),e.hasOwnProperty("selected")||Vue.set(e,"selected",!1),e.hasOwnProperty("favourite")||Vue.set(e,"favourite",!1)})),this.standalone?(this.$on("select",this.selectLabel),this.$on("deselect",this.deselectLabel)):(this.$parent.$on("select",this.selectLabel),this.$parent.$on("deselect",this.deselectLabel),this.$parent.$on("clear",this.clearSelectedLabels),this.$parent.$on("add-favourite",this.addFavouriteLabel),this.$parent.$on("remove-favourite",this.removeFavouriteLabel))}},g={template:'<div class="label-trees">\n        <div v-if="typeahead || clearable" class="label-trees__head">\n            <button v-if="clearable" @click="clear" class="btn btn-default" title="Clear selected labels" type="button"><span class="fa fa-times fa-fw" aria-hidden="true"></span></button>\n            <typeahead v-if="typeahead" :items="labels" :template="typeaheadTemplate" @select="handleSelect" placeholder="Find label"></typeahead>\n        </div>\n        <div class="label-trees__body">\n            <label-tree v-if="hasFavourites" name="Favourites" :labels="favourites" :show-favourites="showFavourites" :flat="true" :collapsible="collapsible" @select="handleSelect" @deselect="handleDeselect" @remove-favourite="handleRemoveFavourite"></label-tree>\n            <label-tree :name="tree.versionedName" :labels="tree.labels" :multiselect="multiselect" :allow-select-siblings="allowSelectSiblings" :allow-select-children="allowSelectChildren" :show-favourites="showFavourites" :collapsible="collapsible" v-for="tree in trees" @select="handleSelect" @deselect="handleDeselect"  @add-favourite="handleAddFavourite" @remove-favourite="handleRemoveFavourite"></label-tree>\n        </div>\n    </div>',components:{typeahead:m,labelTree:v},data:function(){return{favourites:[],typeaheadTemplate:'<span v-text="item.name"></span><br><small v-text="item.tree.versionedName"></small>'}},props:{trees:{type:Array,required:!0},id:{type:String},typeahead:{type:Boolean,default:!0},clearable:{type:Boolean,default:!0},multiselect:{type:Boolean,default:!1},allowSelectSiblings:{type:Boolean,default:!1},allowSelectChildren:{type:Boolean,default:!1},showFavourites:{type:Boolean,default:!1},collapsible:{type:Boolean,default:!0},listenerSet:{type:String,default:"default"}},computed:{localeCompareSupportsLocales:function(){try{"foo".localeCompare("bar","i")}catch(e){return"RangeError"===e.name}return!1},labels:function(){var e=[];if(this.trees.forEach((function(t){Array.prototype.push.apply(e,t.labels)})),this.localeCompareSupportsLocales){var t=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"});e.sort((function(e,i){return t.compare(e.name,i.name)}))}else e.sort((function(e,t){return e.name<t.name?-1:1}));return e},favouriteIds:function(){return this.favourites.map((function(e){return e.id}))},canHaveMoreFavourites:function(){return this.favourites.length<10},hasFavourites:function(){return this.favourites.length>0},ownId:function(){if(this.id)return this.id;var e=[];for(var t in this.trees)this.trees.hasOwnProperty(t)&&e.push(this.trees[t].id);return e.join("-")},favouriteStorageKey:function(){return"biigle.label-trees.".concat(this.ownId,".favourites")}},methods:{handleSelect:function(e,t){e&&this.$emit("select",e,t)},handleDeselect:function(e,t){this.$emit("deselect",e,t)},clear:function(){this.$emit("clear")},handleAddFavourite:function(e){this.canHaveMoreFavourites&&(this.$emit("add-favourite",e),this.favourites.push(e),this.updateFavouriteStorage())},handleRemoveFavourite:function(e){this.$emit("remove-favourite",e);var t=this.favourites.indexOf(e);-1!==t&&this.favourites.splice(t,1),this.updateFavouriteStorage()},updateFavouriteStorage:function(){this.hasFavourites?localStorage.setItem(this.favouriteStorageKey,JSON.stringify(this.favouriteIds)):localStorage.removeItem(this.favouriteStorageKey)},selectFavourite:function(e){this.favourites[e]&&this.handleSelect(this.favourites[e])}},watch:{trees:{immediate:!0,handler:function(e){e.forEach((function(e){e.version?e.versionedName=e.name+" @ "+e.version.name:e.versionedName=e.name,e.labels.forEach((function(t){t.tree=e}))}))}}},mounted:function(){var e=this;if(this.showFavourites){var t=JSON.parse(localStorage.getItem(this.favouriteStorageKey));if(t){var i=[];this.labels.forEach((function(e){var l=t.indexOf(e.id);-1!==l&&(i[l]=e)})),i.filter(Boolean).forEach((function(t){e.handleAddFavourite(t)}))}for(var l=function(t,i){s.on(t,(function(){e.selectFavourite(i)}),0,e.listenerSet)},n=1;n<=9;n++)l(n.toString(),n-1);l("0",9)}}};biigle.$declare("labelTrees.components.labelTrees",g);var y={mixins:[h,l],data:{labelTree:null,ownProjects:[],authorizedProjects:[],authorizedOwnProjects:[],typeaheadTemplate:'<span v-text="item.name"></span><br><small v-text="item.description"></small>',privateId:null},components:{typeahead:p},computed:{isPrivate:function(){return this.labelTree.visibility_id===this.privateId},classObject:function(){return{"panel-warning":this.editing}},authorizableProjects:function(){var e=this;return this.ownProjects.filter((function(t){for(var i=e.authorizedProjects.length-1;i>=0;i--)if(e.authorizedProjects[i].id===t.id)return!1;return!0}))},hasAuthorizedProjects:function(){return this.authorizedProjects.length>0}},methods:{fetchOwnProjects:function(){var e=this;b.query().then((function(t){Vue.set(e,"ownProjects",t.body)}),a)},addAuthorizedProject:function(e){var t=this;e&&(this.startLoading(),c.addAuthorizedProject({id:this.labelTree.id},{id:e.id}).then((function(){return t.authorizedProjectAdded(e)}),a).finally(this.finishLoading))},authorizedProjectAdded:function(e){this.authorizedProjects.push(e),this.authorizedOwnProjects.push(e.id)},removeAuthorizedProject:function(e){var t=this;this.startLoading(),c.removeAuthorizedProject({id:this.labelTree.id,project_id:e.id}).then((function(){return t.authorizedProjectRemoved(e)}),a).finally(this.finishLoading)},authorizedProjectRemoved:function(e){var t;for(t=this.authorizedProjects.length-1;t>=0;t--)this.authorizedProjects[t].id===e.id&&this.authorizedProjects.splice(t,1);-1!==(t=this.authorizedOwnProjects.indexOf(e.id))&&this.authorizedOwnProjects.splice(t,1)},isOwnProject:function(e){return-1!==this.authorizedOwnProjects.indexOf(e.id)}},created:function(){this.privateId=biigle.$require("labelTrees.privateVisibilityId"),this.labelTree=biigle.$require("labelTrees.labelTree"),this.authorizedProjects=biigle.$require("labelTrees.authorizedProjects"),this.authorizedOwnProjects=biigle.$require("labelTrees.authorizedOwnProjects"),this.$once("editing.start",this.fetchOwnProjects)}},T=[0,.5,.9],L=[360,1,1],_=[0,2,2],S=function(){for(var e,t=[0,0,0],i=t.length-1;i>=0;i--)e=10*_[i],t[i]=(L[i]-T[i])*Math.random()+T[i],t[i]=0!==e?Math.round(t[i]*e)/e:Math.round(t[i]);return"#"+function(e){return e.map((function(e){return 1===(e=e.toString(16)).length?"0"+e:e}))}(function(e){var t,i=e[0]/60,l=Math.floor(i),n=i-l,a=[e[2]*(1-e[1]),e[2]*(1-e[1]*n),e[2]*(1-e[1]*(1-n))];switch(l){case 1:t=[a[1],e[2],a[0]];break;case 2:t=[a[0],e[2],a[2]];break;case 3:t=[a[0],a[1],e[2]];break;case 4:t=[a[2],a[0],e[2]];break;case 5:t=[e[2],a[0],a[1]];break;default:t=[e[2],a[2],a[0]]}return t.map((function(e){return Math.round(255*e)}))}(t)).join("")},w={props:{labels:{type:Array,required:!0},color:{type:String,default:""},parent:{type:Object,default:null},name:{type:String,default:""}},components:{typeahead:m},computed:{selectedColor:{get:function(){return this.color},set:function(e){this.$emit("color",e)}},selectedName:{get:function(){return this.name},set:function(e){this.$emit("name",e)}},selectedParent:function(){return this.parent?this.parent.name:""},hasNoLabels:function(){return 0===this.labels.length},hasNoParent:function(){return!this.parent},hasNoName:function(){return!this.name}},methods:{refreshColor:function(){this.selectedColor=S()},resetParent:function(){this.$emit("parent",null)},selectLabel:function(e){this.$emit("parent",e)}}},$={mixins:[w],methods:{submit:function(){var e={name:this.selectedName,color:this.selectedColor};this.parent&&(e.parent_id=this.parent.id),this.$emit("submit",e)}}},C={mixins:[w],components:{wormsResultItem:{props:{item:{type:Object,required:!0},recursive:{type:Boolean,required:!0},labels:{type:Array,required:!0},parent:{type:Object,default:null}},computed:{classification:function(){return this.item.parents.join(" > ")},buttonTitle:function(){return this.recursive?"Add ".concat(this.item.name," and all WoRMS parents as new labels"):this.parent?"Add ".concat(this.item.name," as a child of ").concat(this.parent.name):"Add ".concat(this.item.name," as a root label")},classObject:function(){return{"list-group-item-success":this.selected}},selected:function(){var e=this;return this.labels.some((function(t){return t.source_id==e.item.aphia_id}))}},methods:{select:function(){this.selected||this.$emit("select",this.item)}}}},data:function(){return{results:[],recursive:!1,hasSearched:!1,unaccepted:!1,worms:null}},computed:{hasResults:function(){return this.results.length>0},recursiveButtonClass:function(){return{active:this.recursive,"btn-info":this.recursive}},unacceptedButtonClass:function(){return{active:this.unaccepted,"btn-info":this.unaccepted}}},methods:{findName:function(){var e=this;this.$emit("load-start");var t={id:this.worms.id,query:this.selectedName};this.unaccepted&&(t.unaccepted="true"),o.query(t).then(this.updateResults,a).finally((function(){e.hasSearched=!0,e.$emit("load-finish")}))},updateResults:function(e){this.results=e.data},importItem:function(e){var t={name:e.name,color:this.selectedColor,source_id:e.aphia_id,label_source_id:this.worms.id};this.recursive?t.recursive="true":this.parent&&(t.parent_id=this.parent.id),this.$emit("submit",t)},toggleRecursive:function(){this.recursive=!this.recursive},toggleUnaccepted:function(){this.unaccepted=!this.unaccepted}},created:function(){this.worms=biigle.$require("labelTrees.wormsLabelSource")}},A={mixins:[h,l],data:{labelTree:null,labels:[],selectedColor:S(),selectedLabel:null,selectedName:""},components:{tabs:VueStrap.tabs,tab:VueStrap.tab,labelTree:v,manualLabelForm:$,wormsLabelForm:C},computed:{classObject:function(){return{"panel-warning":this.editing}}},methods:{saveLabel:function(e,t){this.startLoading(),r.update({id:e.id},{name:e.name,color:e.color}).catch((function(e){t(),a(e)})).finally(this.finishLoading)},deleteLabel:function(e){var t=this;this.startLoading(),r.delete({id:e.id}).then((function(){t.labelDeleted(e)}),a).finally(this.finishLoading)},labelDeleted:function(e){this.selectedLabel&&this.selectedLabel.id===e.id&&this.deselectLabel(e);for(var t=this.labels.length-1;t>=0;t--)if(this.labels[t].id===e.id){this.labels.splice(t,1);break}},selectLabel:function(e){this.selectedLabel=e,e?(this.selectedColor="#"+e.color,this.$emit("select",e),n.$emit("selectLabel",e)):(this.$emit("clear"),n.$emit("selectLabel",null))},deselectLabel:function(e){this.selectedLabel=null,this.$emit("deselect",e),n.$emit("selectLabel",null)},selectColor:function(e){this.selectedColor=e},selectName:function(e){this.selectedName=e},insertLabel:function(e){Vue.set(e,"open",!1),Vue.set(e,"selected",!1);for(var t=e.name.toLowerCase(),i=0,l=this.labels.length;i<l;i++)if(this.labels[i].name.toLowerCase()>=t)return void this.labels.splice(i,0,e);this.labels.push(e)},createLabel:function(e){this.loading||(this.startLoading(),r.save({label_tree_id:this.labelTree.id},e).then(this.labelCreated,a).finally(this.finishLoading))},labelCreated:function(e){e.data.forEach(this.insertLabel),this.selectedColor=S(),this.selectedName=""}},created:function(){this.labelTree=biigle.$require("labelTrees.labelTree"),this.labels=biigle.$require("labelTrees.labels")}},R={mixins:[h],data:{labelTree:null,members:[],roles:[],defaultRole:null,userId:null},components:{membersPanel:u},methods:{attachMember:function(e){var t=this;this.startLoading(),c.addUser({id:this.labelTree.id},{id:e.id,role_id:e.role_id}).then((function(){return t.memberAttached(e)}),a).finally(this.finishLoading)},memberAttached:function(e){this.members.push(e)},updateMember:function(e,t){var i=this;this.startLoading(),c.updateUser({id:this.labelTree.id,user_id:e.id},{role_id:t.role_id}).then((function(){return i.memberUpdated(e,t)}),a).finally(this.finishLoading)},memberUpdated:function(e,t){e.role_id=t.role_id},removeMember:function(e){var t=this;this.startLoading(),c.removeUser({id:this.labelTree.id,user_id:e.id}).then((function(){return t.memberRemoved(e)}),a).finally(this.finishLoading)},memberRemoved:function(e){for(var t=this.members.length-1;t>=0;t--)this.members[t].id===e.id&&this.members.splice(t,1)}},created:function(){this.labelTree=biigle.$require("labelTrees.labelTree"),this.members=biigle.$require("labelTrees.members"),this.roles=biigle.$require("labelTrees.roles"),this.defaultRole=biigle.$require("labelTrees.defaultRoleId"),this.userId=biigle.$require("labelTrees.userId")}},P={template:'<div class="label-tree-diff">\n        <div v-if="hasDiff">\n            <button\n                class="btn btn-default"\n                title="Accept all merge items"\n                :disabled="cannotResolveAll"\n                @click="acceptAll"\n                >\n                    Accept all\n            </button>\n\n            <button\n                class="btn btn-default"\n                title="Set all merge items as not accepted"\n                :disabled="cannotResolveNone"\n                @click="acceptNone"\n                >\n                    Accept none\n            </button>\n        </div>\n        <table v-if="hasDiff" class="table table-hover">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th v-text="leftName"></th>\n                    <th v-text="rightName"></th>\n                </tr>\n            </thead>\n            <tbody>\n                <label-tree-diff-row\n                    v-for="item in diff"\n                    :key="item.id"\n                    :item="item"\n                    :disabled="disabled"\n                    @accepted="handleResolved"\n                    ></label-tree-diff-row>\n            </tbody>\n        </table>\n        <div v-else class="text-center lead">\n            The label trees are identical.\n        </div>\n    </div>',components:{labelTreeDiffRow:{template:'<tr class="label-tree-diff-row" :class="classObject">\n        <td class="label-tree-diff-row__button">\n            <button\n                v-if="labelToAdd"\n                class="btn btn-sm btn-default"\n                :class="addButtonClass"\n                :disabled="disabled"\n                title="Accept the addition"\n                @click="emitResolved"\n                >\n                    <i class="fa fa-plus"></i>\n            </button>\n            <button\n                v-if="labelToRemove"\n                class="btn btn-sm btn-default"\n                :class="removeButtonClass"\n                :title="removeTitle"\n                @click="emitResolved"\n                :disabled="!acceptable || disabled"\n                >\n                    <i class="fa fa-minus"></i>\n            </button>\n        </td>\n        <td class="label-tree-diff-row__left">\n            <div v-if="hasLeft" class="label-tree-label" :style="labelStyle">\n                <div class="label-tree-label__name">\n                    <span class="label-tree-label__color" :style="leftColorStyle"></span>\n                    <span v-text="leftLabel.name"></span>\n                </div>\n            </div>\n            <div v-if="labelAdded" class="label-tree-label" :style="labelStyle">\n                <div class="label-tree-label__name">\n                    <span class="label-tree-label__color" :style="rightColorStyle"></span>\n                    <span v-text="rightLabel.name"></span>\n                </div>\n            </div>\n        </td>\n        <td class="label-tree-diff-row__right">\n            <div class="label-tree-label" :style="labelStyle">\n                <div v-if="hasRight" class="label-tree-label__name">\n                    <span class="label-tree-label__color" :style="rightColorStyle"></span>\n                    <span v-text="rightLabel.name"></span>\n                </div>\n            </div>\n        </td>\n    </tr>',props:{item:{type:Object,required:!0},disabled:{type:Boolean,required:!1}},computed:{leftLabel:function(){return this.item.left},rightLabel:function(){return this.item.right},hasLeft:function(){return null!==this.leftLabel},hasRight:function(){return null!==this.rightLabel},labelToAdd:function(){return!this.hasLeft&&this.hasRight},labelToRemove:function(){return this.hasLeft&&!this.hasRight},labelsSame:function(){return this.hasLeft&&this.hasRight},leftColorStyle:function(){return{"background-color":"#"+this.leftLabel.color}},rightColorStyle:function(){return{"background-color":"#"+this.rightLabel.color}},classObject:function(){return{success:this.labelToAdd&&!this.accepted,"label-tree-diff-row--added":this.labelToAdd&&this.accepted,danger:this.labelToRemove&&!this.accepted,"label-tree-diff-row--removed":this.labelToRemove&&this.accepted}},labelStyle:function(){return{"padding-left":22*this.item.level+"px"}},addButtonClass:function(){return{"btn-success":this.accepted}},removeButtonClass:function(){return{"btn-danger":this.accepted}},accepted:function(){return this.item.accepted},acceptable:function(){return this.item.acceptable},labelAdded:function(){return this.labelToAdd&&this.accepted},removeTitle:function(){return this.acceptable?"Accept the deletion":"This label cannot be deleted because it or one of its child labels is used"}},methods:{emitResolved:function(){this.$emit("accepted",this.item)}}}},data:function(){return{diff:[]}},props:{leftLabels:{type:Array,required:!0},leftName:{type:String,default:""},rightLabels:{type:Array,required:!0},rightName:{type:String,default:""},usedLabels:{type:Array,default:[]},disabled:{type:Boolean,default:!1}},computed:{leftLabelsById:function(){var e={};return this.leftLabels.forEach((function(t){e[t.id]=t})),e},leftLabelsAsTree:function(){var e=this.generateChildMap(this.leftLabels);return this.generateLabelsAsTree(e.null,e)},rightLabelsAsTree:function(){var e=this.generateChildMap(this.rightLabels);return this.generateLabelsAsTree(e.null,e)},usedLabelMap:function(){var e=this,t={};return this.usedLabels.forEach((function(i){do{t[i]=null,i=e.leftLabelsById[i].parent_id}while(null!==i)})),t},cannotResolveAll:function(){return this.disabled||this.diff.reduce((function(e,t){return t.acceptable?e&&t.accepted:e}),!0)},cannotResolveNone:function(){return this.disabled||this.diff.reduce((function(e,t){return t.acceptable?e&&!t.accepted:e}),!0)},hasDiff:function(){return this.diff.length>0}},methods:{generateChildMap:function(e){var t={};return e.forEach((function(e){t.hasOwnProperty(e.parent_id)?t[e.parent_id].push(e):t[e.parent_id]=[e]})),t},generateLabelsAsTree:function(e,t){var i=this;return e.map((function(e){return t.hasOwnProperty(e.id)?e.children=i.generateLabelsAsTree(t[e.id],t):e.children=[],e})).sort((function(e,t){return e.name+"-"+e.color<=t.name+"-"+t.color?-1:1}))},generateTreeDiff:function(e,t,i,l){var n=this;for(e=e.slice(),t=t.slice(),i=i||[],l=l||0;e.length>0&&t.length>0;){var a=e[0],s=t[0];a.name===s.name?(e.shift(),t.shift(),i.push({id:a.id,level:l,left:a,right:s}),this.generateTreeDiff(a.children,s.children,i,l+1)):a.name<s.name?(e.shift(),i.push({id:a.id,level:l,accepted:!1,acceptable:!this.usedLabelMap.hasOwnProperty(a.id),left:a,right:null}),this.generateTreeDiff(a.children,[],i,l+1)):(t.shift(),i.push({id:s.id,level:l,accepted:!1,acceptable:!0,left:null,right:s}),this.generateTreeDiff([],s.children,i,l+1))}return e.length>0&&e.forEach((function(e){i.push({id:e.id,level:l,accepted:!1,acceptable:!n.usedLabelMap.hasOwnProperty(e.id),left:e,right:null}),n.generateTreeDiff(e.children,[],i,l+1)})),t.length>0&&t.forEach((function(e){i.push({id:e.id,level:l,accepted:!1,acceptable:!0,left:null,right:e}),n.generateTreeDiff([],e.children,i,l+1)})),i},filterRelevantItems:function(e){var t=[];return e.forEach((function(e,i){null!==e.left&&null!==e.right||t.push(i)})),t.forEach((function(t){e[t].relevant=!0;for(var i=e[t].level,l=t;l>=0&&i>0;)e[l].level<i&&(e[l].relevant=!0,i=e[l].level),l-=1})),e.filter((function(e){return e.relevant}))},handleResolved:function(e){e.acceptable&&(e.accepted?(this.cancelResolved(e),null===e.left?this.acceptCancelAddAllChildren(e):null===e.right&&this.acceptCancelDeleteAllParents(e)):(this.setResolved(e),null===e.left?this.acceptAddAllParents(e):null===e.right&&this.acceptDeleteAllChildren(e)))},cancelResolved:function(e){null===e.left?this.$emit("cancel-add",e.right):null===e.right&&this.$emit("cancel-remove",e.left),e.accepted=!1},setResolved:function(e){null===e.left?this.$emit("add",e.right):null===e.right&&this.$emit("remove",e.left),e.accepted=!0},acceptAll:function(){var e=this;this.diff.forEach((function(t){t.accepted||e.handleResolved(t)}))},acceptNone:function(){var e=this;this.diff.forEach((function(t){t.accepted&&e.handleResolved(t)}))},doForAllChildren:function(e,t){for(var i=e.level+1,l=this.diff.indexOf(e)+1;this.diff[l]&&this.diff[l].level>=i;)t.call(this,this.diff[l]),l+=1},doForAllParents:function(e,t){for(var i=e.level,l=this.diff.indexOf(e)-1;i>0&&l>=0;)this.diff[l].level<i&&(i=this.diff[l].level,t.call(this,this.diff[l])),l-=1},acceptDeleteAllChildren:function(e){this.doForAllChildren(e,(function(e){null===e.right&&this.setResolved(e)}))},acceptCancelAddAllChildren:function(e){this.doForAllChildren(e,(function(e){null===e.left&&this.cancelResolved(e)}))},acceptAddAllParents:function(e){this.doForAllParents(e,(function(e){null===e.left&&this.setResolved(e)}))},acceptCancelDeleteAllParents:function(e){this.doForAllParents(e,(function(e){null===e.right&&this.cancelResolved(e)}))},setLeftParentIds:function(e){var t={};return e.forEach((function(e){e.right&&e.left&&(t[e.right.id]=e.left.id)})),e.forEach((function(e){e.right&&e.right.parent_id&&(e.right.left_parent_id=t[e.right.parent_id])})),e}},created:function(){var e=this.generateTreeDiff(this.leftLabelsAsTree,this.rightLabelsAsTree);e=this.filterRelevantItems(e),e=this.setLeftParentIds(e),this.diff=e}},j=Vue.resource("api/v1/label-trees{/id}/merge-labels"),O={mixins:[h],components:{labelTreeDiff:P},data:{baseTree:null,mergeTree:null,usedLabels:[],toAdd:[],toRemove:[],merged:!1},computed:{baseTreeLabels:function(){return this.baseTree.labels},mergeTreeLabels:function(){return this.mergeTree.labels},cannotMerge:function(){return this.loading||0===this.toAdd.length&&0===this.toRemove.length},disableDiff:function(){return this.loading||this.merged}},methods:{handleAdd:function(e){-1===this.toAdd.indexOf(e)&&this.toAdd.push(e)},handleRemove:function(e){-1===this.toRemove.indexOf(e)&&this.toRemove.push(e)},handleCancelAdd:function(e){var t=this.toAdd.indexOf(e);-1!==t&&this.toAdd.splice(t,1)},handleCancelRemove:function(e){var t=this.toRemove.indexOf(e);-1!==t&&this.toRemove.splice(t,1)},bundleToAdd:function(e){var t={};e.forEach((function(e){t[e.id]={name:e.name,color:e.color,parent_id:e.parent_id,left_parent_id:e.left_parent_id}}));var i=[];return Object.keys(t).forEach((function(e){var l=t[e];l.parent_id&&t.hasOwnProperty(l.parent_id)?(t[l.parent_id].children?t[l.parent_id].children.push(l):t[l.parent_id].children=[l],delete l.parent_id,delete l.left_parent_id):(delete l.parent_id,l.left_parent_id&&(l.parent_id=l.left_parent_id),delete l.left_parent_id,i.push(l))})),i},bundleToRemove:function(e){return e.map((function(e){return e.id}))},submitMerge:function(){this.startLoading();var e=this.bundleToAdd(this.toAdd),t=this.bundleToRemove(this.toRemove);j.save({id:this.baseTree.id},{create:e,remove:t}).then(this.handleMergeSuccess,this.handleMergeError)},handleMergeError:function(e){this.finishLoading(),handleResponseError(e)},handleMergeSuccess:function(){this.merged=!0}},created:function(){this.baseTree=biigle.$require("labelTrees.baseTree"),this.mergeTree=biigle.$require("labelTrees.mergeTree"),this.usedLabels=biigle.$require("labelTrees.usedLabels")}},x={components:{typeahead:p},data:{mergeUrlTemplate:null,mergeCandidates:[],typeaheadTemplate:'<span v-text="item.name"></span><br><small v-text="item.description"></small>',chosenCandidate:null},computed:{cannotContinue:function(){return null===this.chosenCandidate},continueUrl:function(){return this.chosenCandidate?this.mergeUrlTemplate.replace(":id",this.chosenCandidate.id):""}},methods:{parseLabelTreeVersionedName:function(e){return e.version&&(e.name=e.name+" @ "+e.version.name),e},chooseCandidate:function(e){this.chosenCandidate=e}},created:function(){this.mergeUrlTemplate=biigle.$require("labelTrees.mergeUrlTemplate"),this.mergeCandidates=biigle.$require("labelTrees.mergeCandidates").map(this.parseLabelTreeVersionedName)}},q={mixins:[h,l],data:{labelTree:null,name:null,description:null,visibility_id:null,userId:null,redirectUrl:null,privateVisibilityId:null},computed:{isPrivate:function(){return this.labelTree.visibility_id===this.privateVisibilityId},hasDescription:function(){return!!this.description},isChanged:function(){return this.name!==this.labelTree.name||this.description!==this.labelTree.description||parseInt(this.visibility_id)!==this.labelTree.visibility_id}},methods:{discardChanges:function(){this.finishEditing(),this.name=this.labelTree.name,this.description=this.labelTree.description,this.visibility_id=this.labelTree.visibility_id},leaveTree:function(){confirm("Do you really want to revoke your membership of label tree '".concat(this.labelTree.name,"'?"))&&(this.startLoading(),c.removeUser({id:this.labelTree.id,user_id:this.userId}).then(this.treeLeft,a).finally(this.finishLoading))},treeLeft:function(){var e=this;this.isPrivate?(f.success("You left the label tree. Redirecting..."),setTimeout((function(){return location.href=e.redirectUrl}),2e3)):location.reload()},deleteTree:function(){confirm("Do you really want to delete the label tree '".concat(this.labelTree.name,"'?"))&&(this.startLoading(),c.delete({id:this.labelTree.id}).then(this.treeDeleted,a).finally(this.finishLoading))},treeDeleted:function(){var e=this;f.success("The label tree was deleted. Redirecting..."),setTimeout((function(){return location.href=e.redirectUrl}),2e3)},saveChanges:function(){this.startLoading(),c.update({id:this.labelTree.id},{name:this.name,description:this.description,visibility_id:this.visibility_id}).then(this.changesSaved,a).finally(this.finishLoading)},changesSaved:function(){this.labelTree.name=this.name,this.labelTree.description=this.description,this.labelTree.visibility_id=parseInt(this.visibility_id),this.finishEditing()}},created:function(){this.privateVisibilityId=biigle.$require("labelTrees.privateVisibilityId"),this.labelTree=biigle.$require("labelTrees.labelTree"),this.userId=biigle.$require("labelTrees.userId"),this.redirectUrl=biigle.$require("labelTrees.redirectUrl"),this.name=this.labelTree.name,this.description=this.labelTree.description,this.visibility_id=this.labelTree.visibility_id}},F={mixins:[h],data:{version:null,redirectUrl:null},methods:{deleteVersion:function(){this.startLoading(),d.delete({id:this.version.id}).then(this.deleteSuccess,a)},deleteSuccess:function(){var e=this;f.success("The label tree version was deleted. Redirecting..."),setTimeout((function(){return location.href=e.redirectUrl}),2e3)}},created:function(){this.version=biigle.$require("labelTrees.version"),this.redirectUrl=biigle.$require("labelTrees.redirectUrl")}},D={mixins:[h],data:{doi:"",doiSaved:!1,version:null},computed:{doiUrl:function(){return"https://doi.org/"+this.doi},doiTitle:function(){return"DOI: "+this.doi}},methods:{cleanDoi:function(e){return e.replace(/^https?\:\/\/doi\.org\//,"")},saveDoi:function(){this.doi=this.cleanDoi(this.doi),d.update({id:this.version.id},{doi:this.doi}).then(this.handleDoiSaved,a)},handleDoiSaved:function(){this.doiSaved=!0}},created:function(){this.version=biigle.$require("labelTrees.version")}};biigle.$mount("label-tree-version-title",F),biigle.$mount("label-tree-version-toolbar",D),biigle.$mount("label-trees-authorized-projects",y),biigle.$mount("label-trees-labels",A),biigle.$mount("label-trees-members",R),biigle.$mount("label-trees-title",q),biigle.$mount("merge-label-trees-container",O),biigle.$mount("merge-label-trees-index-container",x)},zcrr:function(e,t){}});